(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3456],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return p}});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),l=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),p=a,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||r;return n?s.createElement(h,o(o({ref:t},u),{},{components:n})):s.createElement(h,o({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8637:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var s=n(2122),a=n(9756),r=(n(7294),n(3905)),o=["components"],c={sidebar_position:2},i="Conseils",l={unversionedId:"capture-the-flag/hints",id:"capture-the-flag/hints",isDocsHomePage:!1,title:"Conseils",description:"Conseil 1",source:"@site/i18n/fr/docusaurus-plugin-content-docs-dev-academy/current/capture-the-flag/02-hints.md",sourceDirName:"capture-the-flag",slug:"/capture-the-flag/hints",permalink:"/fr/dev-academy/capture-the-flag/hints",editUrl:"https://crowdin.com/project/cosmwasm-docs/fr",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"devAcademy",previous:{title:"Enigmes",permalink:"/fr/dev-academy/capture-the-flag/intro"},next:{title:"Anatomie d'un contrat intelligent",permalink:"/fr/dev-academy/develop-smart-contract/intro"}},u=[{value:"Conseil 1",id:"conseil-1",children:[]},{value:"Conseil 2 : EndPoints",id:"conseil-2--endpoints",children:[]},{value:"Conseil 3 : Formats",id:"conseil-3--formats",children:[{value:"Transactions, adresses, hauteurs de blocs",id:"transactions-adresses-hauteurs-de-blocs",children:[]},{value:"Base64",id:"base64",children:[]}]},{value:"Conseil 4 : Requ\xeates",id:"conseil-4--requ\xeates",children:[{value:"Smart Query",id:"smart-query",children:[]},{value:"Json Schema",id:"json-schema",children:[]},{value:"Execute Smart Contract",id:"execute-smart-contract",children:[]}]},{value:"Conseil 5 : Restauration de compte et signature",id:"conseil-5--restauration-de-compte-et-signature",children:[{value:"Recovering Mnemonic",id:"recovering-mnemonic",children:[]},{value:"Signing offline transactions",id:"signing-offline-transactions",children:[]}]}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,s.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conseils"},"Conseils"),(0,r.kt)("h2",{id:"conseil-1"},"Conseil 1"),(0,r.kt)("p",null,"Les codes \xe0 trouver sont des nombres hexad\xe9cimaux \xe0 16 caract\xe8res (comme ",(0,r.kt)("inlineCode",{parentName:"p"},"c0ad2205922223b2"),")."),(0,r.kt)("h2",{id:"conseil-2--endpoints"},"Conseil 2 : EndPoints"),(0,r.kt)("p",null,"RPC : ",(0,r.kt)("a",{parentName:"p",href:"https://rpc.pebblenet.cosmwasm.com:443"},"https://rpc.pebblenet.cosmwasm.com:443")),(0,r.kt)("p",null,"Robinet (Faucet): ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.pebblenet.cosmwasm.com"},"https://faucet.pebblenet.cosmwasm.com")),(0,r.kt)("p",null,"Explorer : ",(0,r.kt)("a",{parentName:"p",href:"https://block-explorer.pebblenet.cosmwasm.com"},"https://block-explorer.pebblenet.cosmwasm.com")),(0,r.kt)("h2",{id:"conseil-3--formats"},"Conseil 3 : Formats"),(0,r.kt)("h3",{id:"transactions-adresses-hauteurs-de-blocs"},"Transactions, adresses, hauteurs de blocs"),(0,r.kt)("p",null,"Parmi les indices, vous verrez des cha\xeenes de caract\xe8res telles que : ",(0,r.kt)("inlineCode",{parentName:"p"},"8B74EA4E6EC2B8940E6963DF813FE158171C1FEBEAFA36B38DFE80EA0521970C")," Il s'agit d'une cha\xeene hexad\xe9cimale de 32 octets. Tendermint/cosmos-sdk hashent les txs et les blocs dans ce format. Le hashage ci-dessus est un hachage de transaction pebblenet. Ces valeurs sont toujours index\xe9es par les explorateurs de blocs. Lancez une recherche avec le hash pour voir son contenu, par exemple : ",(0,r.kt)("a",{parentName:"p",href:"https://block-explorer.pebblenet.cosmwasm.com/transactions/8B74EA4E6EC2B8940E6963DF813FE158171C1FEBEAFA36B38DFE80EA0521970C"},"https://block-explorer.pebblenet.cosmwasm.com/transactions/8B74EA4E6EC2B8940E6963DF813FE158171C1FEBEAFA36B38DFE80EA0521970C")),(0,r.kt)("p",null,"Une autre valeur des indices: les cha\xeenes de caract\xe8res au format ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm1\u2026."),". Ces cha\xeenes sont des adresses de compte bech32. Allez-y et examinez-en une avec l'explorateur de blocs: ",(0,r.kt)("a",{parentName:"p",href:"https://block-explorer.pebblenet.cosmwasm.com/account/wasm1k8lesl0wsspcpdfpuh8es3k4ymfsfkryydhw03"},"https://block-explorer.pebblenet.cosmwasm.com/account/wasm1k8lesl0wsspcpdfpuh8es3k4ymfsfkryydhw03")),(0,r.kt)("p",null,"La hauteur du bloc est une valeur enti\xe8re s\xe9quentielle non sign\xe9e qui indexe un bloc. Il peut y avoir de nombreuses transactions dans un seul bloc. En voici un exemple de bloc: ",(0,r.kt)("a",{parentName:"p",href:"https://block-explorer.pebblenet.cosmwasm.com/blocks/334748"},"https://block-explorer.pebblenet.cosmwasm.com/blocks/334748")),(0,r.kt)("h3",{id:"base64"},"Base64"),(0,r.kt)("p",null,"De Wikipedia : Base64 est un groupe de sch\xe9mas d'encodage binaire-texte qui repr\xe9sente des donn\xe9es binaires (plus sp\xe9cifiquement, une s\xe9quence d'octets de 8 bits) dans un format de cha\xeene ASCII en traduisant les donn\xe9es en une repr\xe9sentation radix-64."),(0,r.kt)("p",null,"Plus simplement, si vous voyez une cha\xeene de caract\xe8res comme celle-ci : ",(0,r.kt)("inlineCode",{parentName:"p"},"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2hcP3ZcPU5VWXZiVDZ2VFBzCg==")," il s'agit d'une cha\xeene cod\xe9e en base64. Pour d\xe9coder, il suffit d'ex\xe9cuter: ",(0,r.kt)("inlineCode",{parentName:"p"},'echo "aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2hcP3ZcPU5VWXZiVDZ2VFBzCg==" | base64 -d')),(0,r.kt)("h2",{id:"conseil-4--requ\xeates"},"Conseil 4 : Requ\xeates"),(0,r.kt)("p",null,"Voici comment faire des requ\xeates sur les donn\xe9es de la cha\xeene"),(0,r.kt)("p",null,"Les projets bas\xe9s sur cosmos-sdk/CosmWasm ont tous des apis clients similaires : ",(0,r.kt)("inlineCode",{parentName:"p"},"terracli"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmd")," et plus encore. Les interfaces de requ\xeate et de transaction sont tr\xe8s similaires."),(0,r.kt)("p",null,"Requ\xeate de bloc :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmd query block 15 --node https://rpc.pebblenet.cosmwasm.com\n")),(0,r.kt)("p",null,"Requ\xeate de tx :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmd query tx 8B74EA4E6EC2B8940E6963DF813FE158171C1FEBEAFA36B38DFE80EA0521970C --node https://rpc.pebblenet.cosmwasm.com\n")),(0,r.kt)("h3",{id:"smart-query"},"Smart Query"),(0,r.kt)("p",null,"Smart Query interface is defined by the contract itself thus you can run complex queries."),(0,r.kt)("p",null,"Sample cw20 query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"QUERY='{\u201ctoken_info\u201d:{}}\u2019\nwasmd query wasm contract-state smart [bech32_address] \u2018$QUERY\u2019\n")),(0,r.kt)("h3",{id:"json-schema"},"Json Schema"),(0,r.kt)("p",null,"Smart contract execute or query interface is defined by Json Schema that is found in the smart contract repo. Smart contract developer should provide schema to the users: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-base/schema"},"https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-base/schema")),(0,r.kt)("h3",{id:"execute-smart-contract"},"Execute Smart Contract"),(0,r.kt)("p",null,"You can execute smart contracts using cli. Some riddles needs this skill for the solution:"),(0,r.kt)("p",null,"Sending tokens from cw20"),(0,r.kt)("p",null,"You need"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"SEND_MSG='{\u201ctransfer\u201d: {\u201camount\u201d:\u201d1000\u2033, \u201crecipient\u201d:\u201dwasm170n6mk4k97kvrtj25t9ghm54ewmewt6yq9g6kt\u201d}}\u2019\nwasmd tx wasm execute $CONTRACT_ADDR \u201c$SEND_MSG\u201d \u2013from wallet\n")),(0,r.kt)("h2",{id:"conseil-5--restauration-de-compte-et-signature"},"Conseil 5 : Restauration de compte et signature"),(0,r.kt)("h3",{id:"recovering-mnemonic"},"Recovering Mnemonic"),(0,r.kt)("p",null,"The mnemonic seed phrase is the only access to a wallet. You can recover access to an account if you have the mnemonic of the wallet."),(0,r.kt)("p",null,"You can recover an account using mnemonic with this command below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmd keys add show --recover\n> Enter your bip39 mnemonic\nchef sense chicken net around sting course someone question badge hand also nation siren remember famous bird eagle phrase kidney devote damp sugar throw\n")),(0,r.kt)("h3",{id:"signing-offline-transactions"},"Signing offline transactions"),(0,r.kt)("p",null,"Offline signing is a cool functionality. It is like a delayed payment, where you sign a transaction and only submit it later to the network. One use case: create a transaction that will send from account A to B and send the unsigned tx to the account A owner to approve and sign the transaction then broadcast to the chain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# \u2013generate-only flag creates tx and only prompts unsigned tx\nwasmd tx bank send wasm134rsdpu5xfhegdclxmdeqxn0j6gmenkmcdmpuz wasm103hx72nfk0mypwlfa3qwyx4rzvv35gvyy83ral 100upebble --memo \u201cyou found me\u201d --chain-id pebblenet-1 --generate-only > unsigned_tx.json\n# {\u201cbody\u201d:{\u201cmessages\u201d:[{\u201c@type\u201d:\u201d/cosmos.bank.v1beta1.MsgSend\u201d,\u201dfrom_address\u201d:\u201dwasm134rsdpu5xfhegdclxmdeqxn0j6gmenkmcdmpuz\u201d,\u201dto_address\u201d:\u201dwasm103hx72nfk0mypwlfa3qwyx4rzvv35gvyy83ral\u201d,\u201damount\u201d:[{\u201cdenom\u201d:\u201dupebble\u201d,\u201damount\u201d:\u201d100\u2033}]}],\u201dmemo\u201d:\u201dyou found me\u201d,\u201dtimeout_height\u201d:\u201d0\u2033,\u201dextension_options\u201d:[],\u201dnon_critical_extension_options\u201d:[]},\u201dauth_info\u201d:{\u201csigner_infos\u201d:[],\u201dfee\u201d:{\u201camount\u201d:[],\u201dgas_limit\u201d:\u201d81363\u2033,\u201dpayer\u201d:\u201d\u201d,\u201dgranter\u201d:\u201d\u201d}},\u201dsignatures\u201d:[]}\n\n# signs the tx and posts it to the chain\nwasmd tx sign unsigned_tx.json --from wasm134rsdpu5xfhegdclxmdeqxn0j6gmenkmcdmpuz --chain-id pebblenet-1\n")))}d.isMDXComponent=!0}}]);